package com.whcst;

import java.net.MalformedURLException;
import java.net.URL;
import javax.xml.namespace.QName;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;
import javax.xml.ws.Service;

/**
 * This class was generated by Apache CXF 3.1.4
 * 2018-09-28T14:56:44.755+08:00
 * Generated source version: 3.1.4
 * 
 */
@WebServiceClient(name = "SiteWebservice", 
                  wsdlLocation = "http://27.17.15.59:8027/SiteWebservice/SiteWebservice.asmx?wsdl",
                  targetNamespace = "http://www.whcst.com/") 
public class SiteWebservice extends Service {

    public final static URL WSDL_LOCATION;

    public final static QName SERVICE = new QName("http://www.whcst.com/", "SiteWebservice");
    public final static QName SiteWebserviceSoap12 = new QName("http://www.whcst.com/", "SiteWebserviceSoap12");
    public final static QName SiteWebserviceSoap = new QName("http://www.whcst.com/", "SiteWebserviceSoap");
    static {
        URL url = null;
        try {
            url = new URL("http://27.17.15.59:8027/SiteWebservice/SiteWebservice.asmx?wsdl");
        } catch (MalformedURLException e) {
            java.util.logging.Logger.getLogger(SiteWebservice.class.getName())
                .log(java.util.logging.Level.INFO, 
                     "Can not initialize the default wsdl from {0}", "http://27.17.15.59:8027/SiteWebservice/SiteWebservice.asmx?wsdl");
        }
        WSDL_LOCATION = url;
    }

    public SiteWebservice(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public SiteWebservice(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public SiteWebservice() {
        super(WSDL_LOCATION, SERVICE);
    }
    
    public SiteWebservice(WebServiceFeature ... features) {
        super(WSDL_LOCATION, SERVICE, features);
    }

    public SiteWebservice(URL wsdlLocation, WebServiceFeature ... features) {
        super(wsdlLocation, SERVICE, features);
    }

    public SiteWebservice(URL wsdlLocation, QName serviceName, WebServiceFeature ... features) {
        super(wsdlLocation, serviceName, features);
    }    




    /**
     *
     * @return
     *     returns SiteWebserviceSoap
     */
    @WebEndpoint(name = "SiteWebserviceSoap12")
    public SiteWebserviceSoap getSiteWebserviceSoap12() {
        return super.getPort(SiteWebserviceSoap12, SiteWebserviceSoap.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns SiteWebserviceSoap
     */
    @WebEndpoint(name = "SiteWebserviceSoap12")
    public SiteWebserviceSoap getSiteWebserviceSoap12(WebServiceFeature... features) {
        return super.getPort(SiteWebserviceSoap12, SiteWebserviceSoap.class, features);
    }


    /**
     *
     * @return
     *     returns SiteWebserviceSoap
     */
    @WebEndpoint(name = "SiteWebserviceSoap")
    public SiteWebserviceSoap getSiteWebserviceSoap() {
        return super.getPort(SiteWebserviceSoap, SiteWebserviceSoap.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns SiteWebserviceSoap
     */
    @WebEndpoint(name = "SiteWebserviceSoap")
    public SiteWebserviceSoap getSiteWebserviceSoap(WebServiceFeature... features) {
        return super.getPort(SiteWebserviceSoap, SiteWebserviceSoap.class, features);
    }

}
